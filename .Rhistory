case[, numArrests := as.integer(uniqueN(arrest_date)), by = person_id]
case[, numArrests := NULL]
case[, numArrests := as.integer(uniqueN(arrest_date)), by = person_id]
case[, .N, by = numArrests]
case[numArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
case
re_arrests <- case[re_arrest==1, unique(person_id)]
case[person_id %in% re_arrests]
case <- case[, re_arrest := 0]
case[numArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
re_arrests <- case[re_arrest==1, unique(person_id)]
case[person_id %in% re_arrests]
# Question 2 --------------------------------------------------------------------------------------------
# Create a variable called prior_arrests that equals the number of arrests prior to the current arrest.
# Assume that all of the individual’s arrests prior to the study period are contained in prior.csv.
# For example, if person z has five arrests in prior.csv and two in case.csv, her first arrest in case.csv should
# have prior_arrests = 5 and the second should have prior_arrests = 6.
#
# If someone is not included in prior_arrests.csv, assume they had zero arrests at the start of the study period.
case[, arrests := 1]
case[, cumSumArrests := cumsum(arrests), by = person_id]
case
case[, cumSumArrests := NULL]
case[, priorArrests := NULL]
case[, prior_arrests := NULL]
case[, prior_arrests := cumsum(arrests)-1, by = person_id]
case
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
# Load data  --------------------------------------------------------------
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
## are there any arrest dates by person that fall between the arrest date and the disp date?
## For each person
##
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
## Check my work
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
# Question 2 --------------------------------------------------------------------------------------------
# Create a variable called prior_arrests that equals the number of arrests prior to the current arrest.
# Assume that all of the individual’s arrests prior to the study period are contained in prior.csv.
# For example, if person z has five arrests in prior.csv and two in full.csv, her first arrest in full.csv should
# have prior_arrests = 5 and the second should have prior_arrests = 6.
#
# If someone is not included in prior_arrests.csv, assume
# Question 2 --------------------------------------------------------------------------------------------
# Create a variable called prior_arrests that equals the number of arrests prior to the current arrest.
# Assume that all of the individual’s arrests prior to the study period are contained in prior.csv.
# For example, if person z has five arrests in prior.csv and two in full.csv, her first arrest in full.csv should
# have prior_arrests = 5 and the second should have prior_arrests = 6.
#
# If someone is not included in prior_arrests.csv, assume they had zero arrests at the start of the study period.
full[, caseNumArrests := uniqueN(arrest_date), by = person_id]
full[, mismatchArrests := 0]
full[caseNumArrests != numPriorArrests, mismatchArrests := 1, by = person_id]
full[mismatchArrests ==1]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
# Load data  --------------------------------------------------------------
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
## Let's find the discrepancy in arrest counts between case and prior csvs
priorArrestsRaw[, personDate := paste0(person_id, arrest_date)]
full[, personDate := paste0(person_id, arrest_date)]
full[!personDate %in% priorArrestRaw[, personDate]]
full[!personDate %in% priorArrestsRaw[, personDate]]
full
full
full[personDate %in% priorArrestsRaw[, personDate]]
full[personDate %in% priorArrestsRaw$personDate]
full[personDate %in% "12012-01-04"]
priorArrestsRaw$personDate
full[personDate %in% priorArrestsRaw$personDate]
full[priorArrestsRaw$personDate %in% personDate]
full[personDate]
full[,personDate]
full[personDate %in% unique(priorArrestsRaw$personDate)]
unique(priorArrestsRaw$personDate)
class(unique(priorArrestsRaw$personDate))
class(full$personDate)
setkey(priorArrestsRaw, personDate)
setkey(full, personDate)
full[priorArrestsRaw]
merge(x = full, priorArrests, outer)
merge(x = full, y = priorArrests,all = T, by = personDate)
merge(x = full, y = priorArrestsRaw,all = T, by = personDate)
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
full
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
## Get cum sum of
full[, index := 1]
full[, prior_arrests := cumsum(index)-1, by = person_id]
## Get cum sum of
full[totalArrests != numPriorArrests]
full
## Get cum sum of
full[diff(totalArrests, numPriorArrests) > 1]
## Get cum sum of
full[totalArrests - numPriorArrests > 1]
source('~/Desktop/CPL Assessment/Controller.R')
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
earlierArrest = min(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
## Get cum sum of
full[numPriorArrests >= totalArrests]
# Author: Cassandra Bayer
# Date:
# Objective: CPL Technical Assessment
# Question 1 --------------------------------------------------------------------------------------------
# The main outcome of interest is whether the defendant was arrested again prior to his/her disposition
# (trial or court appearance) date. Create a variable called ‘re_arrest’ that equals one if the defendant was
# arrested prior to trial and zero otherwise. E.g., imagine person 1 was arrested three times.
## are there any arrest dates by person that fall between the arrest date and the disp date?
## For each person
##
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
## Check my work
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
## Get cum sum of
full[numPriorArrests >= totalArrests]
priorArrestsRaw[person_id == 5]
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
## are there any arrest dates by person that fall between the arrest date and the disp date?
## For each person
##
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
## Check my work
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
## I need to find out if anyone in the prior data set is not in the full
full[!person_id %in% person_id,]
## I need to find out if anyone in the prior data set is not in the full
full[person_id %in% person_id,]
uniqueN(full$person_id)
uniqueN(priorArrests$person_id)
## I need to find out if anyone in the prior data set is not in the full
full[!person_id %in% priorArrests$person_id,]
## I need to find out if anyone in the prior data set is not in the full
full[!person_id %in% priorArrests$person_id, index := 0]
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
earlierArrest = min(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
full
## Next, I need to find out of the minimum arrest dates match in both data sets to ensure completeness
full[, earlierArrestFull := min(arrest_date), by = person_id]
## Next, I need to find out of the minimum arrest dates match in both data sets to ensure completeness
full[, earliestArrestFull := min(arrest_date), by = person_id]
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
earliestArrest = min(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
source('~/Desktop/CPL Assessment/Controller.R')
# Load data  --------------------------------------------------------------
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## unique prior arrests to person_id to allow for merge
priorArrestsRaw <- priorArrests
priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
earliestArrest = min(arrest_date),
numPriorArrests = as.integer(uniqueN(arrest_date)),
priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
setkey(priorArrests, person_id)
full <- demo[case]
full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
##
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
## Check my work
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
# Question 2 --------------------------------------------------------------------------------------------
# Create a variable called prior_arrests that equals the number of arrests prior to the current arrest.
# Assume that all of the individual’s arrests prior to the study period are contained in prior.csv.
# For example, if person z has five arrests in prior.csv and two in full.csv, her first arrest in full.csv should
# have prior_arrests = 5 and the second should have prior_arrests = 6.
# If someone is not included in prior_arrests.csv, assume they had zero arrests at the start of the study period.
## I need to find out if anyone in the prior data set is not in the full-- they have no previous arrests
full[!person_id %in% priorArrests$person_id, index := 0]
## Next, I need to find out of the minimum arrest dates match in both data sets to ensure completeness
full[, earliestArrestFull := min(arrest_date), by = person_id]
full[earliestArrestFull != earliestArrest]
case[person_id==1]
priorArrestsRaw[person_id==1]
priorArrestsRaw
## Get a comprehensive list of arrests by person
case[, .(person_id, arrest_date)]
## Get a comprehensive list of arrests by person
case <- case[, .(person_id, arrest_date)]
## Get a comprehensive list of arrests by person
caseSmall <- case[, .(person_id, arrest_date)]
Load data  --------------------------------------------------------------
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## Get a comprehensive list of arrests by person
caseSmall <- case[, .(person_id, arrest_date)]
totalArrests <- rbind(caseSmall, priorArrests)
totalArrests <- rbind(caseSmall, priorArrests,)
totalArrests <- rbind(caseSmall, priorArrests)
totalArrests
totalArrests <- unique(rbind(caseSmall, priorArrests))
totalArrests <- totalArrests[order(person_id, arrest_date)]
source('~/Desktop/CPL Assessment/Controller.R')
source('~/Desktop/CPL Assessment/Controller.R')
source('~/Desktop/CPL Assessment/Controller.R')
source('~/Desktop/CPL Assessment/Controller.R')
# Load data  --------------------------------------------------------------
# Inital loading and basic cleaning
case <- as.data.table(read.csv("case.csv", stringsAsFactors = F))
demo <- as.data.table(read.csv("demo.csv",stringsAsFactors = F))
priorArrests <- as.data.table(read.csv("prior_arrests.csv", stringsAsFactors = F))
## Get names and data types for all in environment
sapply(case, class)
sapply(demo, class)
sapply(priorArrests, class)
## Get a count of person_ids in prior
## Update data types
case[ , c("arrest_date", "dispos_date") := lapply(.SD, as.Date), .SDcols = c("arrest_date", "dispos_date")]
demo[, bdate := as.Date(bdate)]
priorArrests[, arrest_date := as.Date(arrest_date)]
## Get a comprehensive list of arrests by person
caseSmall <- case[, .(person_id, arrest_date)]
totalArrests <- unique(rbind(caseSmall, priorArrests))
totalArrests <- totalArrests[order(person_id, arrest_date)]
## unique prior arrests to person_id to allow for merge
# priorArrests <- priorArrests[, .(mostRecentPriorArrest = max(arrest_date),
#                                  earliestArrest = min(arrest_date),
#                 numPriorArrests = as.integer(uniqueN(arrest_date)),
#                 priorArrestDates = paste(unique(arrest_date), collapse = ", ")),
#              by = person_id]
## Merge the data set together
setkey(case, person_id)
setkey(demo, person_id)
# setkey(priorArrests, person_id)
full <- demo[case]
# full <- priorArrests[full]
full <- full[order(person_id,arrest_date)]
## I need to find out if anyone in the prior data set is not in the full-- they have no previous arrests
totalArrests[, index := 1]
totalArrests[, prior_arrests := cumsum(index)-1, by = person_id]
totalArrests
totalArrests <- totalArrests[, .(prior_arrests = cumsum(index)-1), by = person_id]
totalArrests
## Get a comprehensive list of arrests by person
caseSmall <- case[, .(person_id, arrest_date)]
totalArrests <- unique(rbind(caseSmall, priorArrests))
totalArrests <- totalArrests[order(person_id, arrest_date)]
## unique prior arrests to person_id to allow for merge
# pri
## I need to find out if anyone in the prior data set is not in the full-- they have no previous arrests
totalArrests[, index := 1]
totalArrests[, prior_arrests := cumsum(index)-1, by = person_id]
setkey(totalArrests, person_id, arrest_date)
setkey(full, totalArrests, arrest_date)
setkey(full, person_id, arrest_date)
totalArrests[full]
full <- totalArrests[full]
full[is.na(prior_arrests)]
full[, .N, by = prior_arrests]
full[, age := arrest_date - bdate, by = person_id]
full
full[, age := (arrest_date - bdate)/365, by = person_id]
full
full[, age := round((arrest_date - bdate)/365,0), by = person_id]
full
full[, age := round((as.integer(arrest_date - bdate)/365),1), by = person_id]
full
full[, age := round((as.integer(arrest_date - bdate)/365),0), by = person_id]
full
class(full$age)
full[, age := as.integer(age)]
full
names(full)
totalArrests[, index := NULL]
source('~/Desktop/CPL Assessment/Controller.R')
full <- full[order(person_id, arrest_date)]
full[, totalArrests := as.integer(uniqueN(arrest_date)), by = person_id]
full <- full[, re_arrest := 0]
full[totalArrests > 1 &
(arrest_date < shift(arrest_date, 1) & shift(arrest_date, 1) < dispos_date),
re_arrest := 1, by = person_id]
## Check my work
re_arrests <- full[re_arrest==1, unique(person_id)]
full[person_id %in% re_arrests]
totalArrests[, index := 1]
totalArrests[, prior_arrests := cumsum(index)-1, by = person_id]
totalArrests[, index := NULL]
setkey(totalArrests, person_id, arrest_date)
setkey(full, person_id, arrest_date)
full <- totalArrests[full]
full[, .N, by = prior_arrests]
# Question 3 --------------------------------------------------------------------------------------------
# Create an ‘age’ variable that equals the defendant’s age at the time of each arrest.
full[, age := round((arrest_date - bdate/365),0), by = person_id]
full[, age := as.integer(age)]
sapply(full, class)
# Question 3 --------------------------------------------------------------------------------------------
# Create an ‘age’ variable that equals the defendant’s age at the time of each arrest.
full[, age := arrest_date - bdate, by = person_id]
full[, age := as.integer(age)]
fullf
full
full[, age := round(age/365),0]
full[, age := round((age/365),0)]
ful
full
full[, .N, by = re_arrest]
lm(data = full,formula = re_arrest ~ treatment)
lm(data = full,formula = re_arrest ~ treat)
## I want to know if there is an even distribution amongst those who have received the treatment
full[, .N, by = race]
full[, .N, by = gender]
full{, .N, by = age}
full{, .N, by = age]
full[], .N, by = age]
full[, .N, by = age]
full[, .N, by = age][order(age)]
full[age < 18]
full[age < 15]
source('~/Desktop/CPL Assessment/CPL_Statistical Analysis.R')
fd <-data.table(fd)
library(data.table)
fd <-data.table(fd)
